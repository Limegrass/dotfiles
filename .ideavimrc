" :actionlist
set encoding=utf-8
scriptencoding utf-8
let mapleader=' '

" ============================================================================
" BASIC SETTINGS
" ============================================================================
set surround
set showmode
set ruler
set incsearch
set nohlsearch
set ignorecase
set smartcase
set number
set wrap
set wildmenu
set virtualedit=all
set guioptions=c
set listchars=tab:▸\ ,trail:·,precedes:←,extends:→,nbsp:·
set list
set selection=inclusive
set undofile
set hidden
set ideajoin
set history=100
setlocal spelllang=en_us
set backspace=indent,eol,start
" :vs and :sp direction option
set splitright
set splitbelow
" Enable code bracket folding
set foldmethod=indent
set foldlevel=99
" Prevent change to Hiragana
set iminsert=0
set imsearch=-1
" Set default clipboard to be the system register
" set clipboard=unnamed

" ============================================================================
" KEYBINDINGS AND REMAPS
" ============================================================================
" Remap J, K some to navigate visible lines
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
vnoremap j gj
vnoremap k gk

" ALT+jk to move lines up and down
nnoremap <A-j> :move .+1<CR>==
nnoremap <A-k> :move .-2<CR>==
vnoremap <A-j> :move '>+1<CR>gv=gv
vnoremap <A-k> :move '<-2<CR>gv=gv
inoremap <A-j> <Esc>:move .+1<CR>==gi
inoremap <A-k> <Esc>:move .-2<CR>==gi


" One day the extensions will support functions
" Aligns to character of previous line +1
" Assumed above is longer than current
nnoremap >( ^kyf(jPv0r<SPACE>
nnoremap >' ^kyf'jPv0r<SPACE>
nnoremap >" ^kyf"jPv0r<SPACE>
nnoremap >{ ^kyf{jPv0r<SPACE>
nnoremap >[ ^kyf[jPv0r<SPACE>
"Aligns to given element
nnoremap >. ^kyt.jPv0r<SPACE>
nnoremap >, ^kyt,jPv0r<SPACE>
" Aligns to the previous start of the line
nnoremap >K ^kywjP
nnoremap >J ^jywkP

" Assumed above is longer than current
nnoremap <( ^kT(jdw
nnoremap <' ^kT'jdw
nnoremap <" ^kT"jdw
nnoremap <{ ^kT{jdw
nnoremap <[ ^kT[jdw
"Aligns to given element
nnoremap <. ^kF.jdw
nnoremap <, ^kF,jdw
nnoremap <K ^k^jdw
nnoremap <J ^j^kdw

nnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
nnoremap <leader>d "+d
nnoremap <leader>Y "+y$

vnoremap <leader>y "+y
vnoremap <leader>d "+d

" =============================== VISUAL MODE ================================
nnoremap cm :s/,\s*/,\r/g<CR>
" Yank to end of line, yy for line yank
nnoremap Y y$
nnoremap Q @q
" Toggles off Highlighting
nnoremap <leader>h :set hlsearch!<CR>
" Switch between splits
nnoremap <C-W>L :action MoveTabRight<CR>
nnoremap <C-W>J :action MoveTabDown<CR>
" Mark TODO as DONE
nnoremap <leader>z :s/TODO/DONE/<CR>
nnoremap <leader>T :vimgrep /TODO/ %<CR>

nnoremap <leader>fr :action FindUsages<CR>

nnoremap <leader><TAB> :action CommentByLineComment<CR>
nnoremap <leader><S-TAB> :action CommentByBlockComment<CR>
nnoremap <C-SPACE> :action GotoFile<CR>
nnoremap <leader><C-SPACE> :action GotoChangedFile<CR>
nnoremap <C-S-SPACE> :action FindInPath<CR>
nnoremap <leader>cf :action Compare.SameVersion<CR>
nnoremap <leader>rn :action RenameElement<CR>
nnoremap z[ :action StepInto<CR>
nnoremap z] :action StepOver<CR>
nnoremap z<BS> :action StepOut<CR>
nnoremap <leader><CR> :action Debug<CR>
nnoremap zQ :action Resume<CR>
nnoremap zZ :action ToggleLineBreakpoint<CR>
nnoremap za :action CollapseRegion<CR>
nnoremap zA :action ExpandRegion<CR>
nnoremap <leader>w :w<CR>
" StripExtraneousWhiteSpace()
nnoremap cx :%s/\s\+$//e<CR>:%s/\($\n\s*\)\+\%$//e<CR>:%s/\%^\($\n\s*\)\+//e<CR>


" :( no abbrevs in Ideavim
nnoremap <leader>m O//<editor-fold desc=""><CR>//</editor-fold><ESC>kci"


" =============================== VISUAL MODE ================================
vnoremap <leader><TAB> :action CommentByLineComment<CR>
vnoremap <leader><C-TAB> :action CommentByBlockComment<CR>

" Change tab structure in normal/visual mode
vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

"Search for visual selected
vnoremap // y/<C-R>"<CR>
vnoremap <leader>z :s/TODO/DONE/<CR>

" vim-unimpaired that actually works in ideavim
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
nnoremap [l :action GotoPreviousError<CR>
nnoremap ]l :action GotoNextError<CR>
