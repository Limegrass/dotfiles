priority 0

snippet clog "console.log()" Ab
console.log(${1});$0
endsnippet

snippet import "ES6 import" b
import ${2:*} from '${1}';$0
endsnippet

snippet bimport "ES6 import with brackets" Ab
import \{${1}\} from '${2}';$0
endsnippet

snippet lambda_inline "inlined lambda"
(${1}) => {
	${2}
}$0
endsnippet

snippet lambda_variable "closure variable"
const ${1:name} = (\{${2:parameters}\}) => {
	${2}
}$0
endsnippet

snippet lambda_object "Lambda for object returns"
(${1}) => (${2})$0
endsnippet

snippet tag "Html/JSX tag" i
<${1}>${2}</$1>$0
endsnippet

snippet tag_closed "Self-closing Html/JSX tag" i
<${1}/>$0
endsnippet

snippet return "return"
return ${1};${0}
endsnippet

snippet return_react "return React components"
return (${1});$0
endsnippet

snippet default_props "PropTypes defaultProps" Ab
${1}.defaultProps = {
	${2}
};$0
endsnippet

snippet prop_types "PropTypes" Ab
${1}.propTypes = {
	${2}
};$0
endsnippet

snippet pt. "PropTypes" Ai
PropTypes.
endsnippet

snippet comment_react "React JSX inline comment"
{/* ${1} */}$0
endsnippet

snippet mock() "Jest mock" Ab
jest.mock('${1}');$0
endsnippet

snippet mock_actual "Jest mock actual" Ab
jest.mock('${1}', () => ({
	...jest.requireActual('$1'),
	${2}
}));$0
endsnippet

snippet beforeEach() "Jest beforeEach" Ab
beforeEach(() => {
	${1}
});$0
endsnippet

snippet describe() "Jest describe" Ab
describe('${1}', () => {
	${2}
})$0
endsnippet

snippet it() "Jest it" Ab
it('${1}', async () => {
	${2}
})$0
endsnippet

snippet expect() "Jest expect" Ab
expect(${1})$0
endsnippet

snippet jsdoc "JS documentation comments" Ab
/** ${1} */$0
endsnippet

snippet ?: "ternary" A
${1:condition} ? ${2:true} : ${3:false};$0
endsnippet

snippet CONST "frozen object" Ab
Object.freeze({
	${1}
})$0
endsnippet

snippet object_containing() "expect.objectContaining" i
expect.objectContaining({
	${1}
})$0
endsnippet

snippet any() "expect.any()" i
expect.any(${1})$0
endsnippet

snippet anything() "expect.anything()" i
expect.anything()
endsnippet

# Would really benefit from being UltiSnips
snippet mkptcomp "" Ab
const ${1:Component} = (${2:prop}) => {
}

$1.propTypes = {
}

$1.defaultProps = {
}
endsnippet

